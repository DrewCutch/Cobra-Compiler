func maxInt(nums: [int]): int{
	var i: int = 1
	var max: int = nums[0]

	while(i < nums.Count){
		if(nums[i] > max){
			max = nums[i]
		}

		i = i + 1
	}

	return max
}

func minInt(nums: [int]): int{
	printStr("Min int!")
	var i: int = 1
	var min: int = nums[0]
	while(i < nums.Count){
		if(nums[i] < min){
			min = nums[i]
		}

		i = i + 1
	}

	return min
}


func map[T, U](vals: [T], f: f[T, U]): [U]{
	var mapped: [U] = []
	var i: int = 0

	while(i < vals.Count){
		mapped.Add(f(vals[i]))

		i = i + 1
	}

	return mapped
}

func apply[T](vals: [T], f: f[T, unit]){
	var i: int = 0

	while(i < vals.Count){
		f(vals[i])
	}
}

func filter[T](vals: [T], f: f[T, bool]): [T]{
	val filtered: [T] = []
	var i: int = 0

	while(i < vals.Count){
		if(f(vals[i])){
			filtered.Add(vals[i])
		}
	}

	return filtered
}

func filterNull[T](vals: [T?]): [T]{
	val filtered: [T] = []
	var i: int = 0

	while(i < vals.Count){
		val next: T? = vals[i]
		if(next !: null){
			filtered.Add(next)
		}
	}

	return filtered
}

func doTwice[X](arg: X, f: f[X, X], g: f[X, X]): X{
	return compose[X, X, X](arg, f, g)
}

func compose[X, Y, Z](arg: X, f: f[X, Y], g: f[Y, Z]): Z{
	var intermediate: Y = f(arg)
	return g(intermediate)
}