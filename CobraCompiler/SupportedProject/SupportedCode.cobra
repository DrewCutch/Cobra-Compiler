import SupportedProject.default.ListTools

func sqrDist(x: int, y: int): int{
	var dist: int = x * x + y * y
	return dist
}

func fib(until: int): int{
	if(until < 0){
		printStr("Incorrect input!")
		return 0
	}
	else if(until == 0){
		return 0
	}
	else if(until == 1){
		return 1
	}
	else{
		var fibNum: int = fib(until - 2) + fib(until - 1)
		return fibNum
	}
	return 0
}

func doMultiple(function: f[int, int], times: int): int{
	var sum: int = 1
	var count: int = 0

	while(count < times){
		sum = function(sum)
		count = count + 1
	}

	return sum
}

func double(n: int): int{
	return n * 2
}

func printTimes(phrase: str, times: int){
	var count: int = 0

	while(count < times){
		printStr(phrase)
		count = count + 1
	}

	return
}

type t1 = int | bool
type t2 = str | float
type t3 = t1 | t2

type vec2D = {
	x: int
	y: int
}

class Vector2D: vec2D{
	var x: int
	var y: int

	init(x: int, y: int){
		this.x = x
		this.y = y
	}
}

func addVec(a: vec2D, b: vec2D): vec2D{
	return Vector2D(a.x + b.x, a.y + b.y)
}

func sqrMag(v: vec2D): int{
	return v.x * v.x + v.y * v.y
}

func manMag(v: vec2D): int{
	return v.x + v.y
}

type person = {
	name: str
	age: int
	bestFriend: person

	greet: f[str, unit]
	meet: f[person, unit]
	setBest: f[person, unit]
	callBestie: f[unit]
}

type Istr = {
	toStr: f[str]
	toStr: f[str, str]
}

type sperson = person & Istr

class Person: sperson {
	var name: str
	var age: int
	var bestFriend: person

	init(name: str, age: int){
		this.name = name
		this.age = age
	}

	func setBest(best: person){
		this.bestFriend = best

		return
	}

	func callBestie(){
		printStr("calling: ")
		printStr(this.bestFriend.name)

		return
	}

	func greet(greeting: str){
		printStr(this.name)
		printStr(greeting)

		return
	}

	func meet(other: person){
		printStr(this.name)
		printStr("meet")
		printStr(other.name)

		return
	}

	func toStr(): str{
		return this.name
	}

	func toStr(arg: str): str{
		return arg
	}
}


func testVecs(){
	var a: vec2D = Vector2D(5, 5)
	var b: vec2D = Vector2D(2, 0 - 1)

	var c: vec2D = addVec(a, b)

	printStr("resulting vector:")
	printInt(c.x)
	printInt(c.y)

	return
}

func add(a: int, b: int, c: int): int{
	return a + b + c
}

func add(a: int, b: int): int{
	return a + b
}

func main(): int{
	var drew: person = Person("drew", 20)
	var briti: sperson = Person("briti", 19)

	var printable: Istr = briti

	var dum: str = "dum"

	printStr(printable.toStr())
	printStr(printable.toStr(dum))

	drew.setBest(briti)
	drew.callBestie()

	drew.meet(briti)

	if("hello".Contains("o")){
		printStr("hello contains o")
	}

	var a: int = (4 - 3) * (10 / 3)
	a = a + 1
	var b: int = 5
	var sum: int = a + b

	//var function: f[int, int, int] = add
	//var function2: f[int, int, int] = function
	//var function3: f[str, int, unit] = printTimes

	//sum = function(10, 10)
	printInt(sum)

	var powered: int = doMultiple(double, 5)
	printInt(powered)

	if(sum > a){
		printStr("The sum is greater than a")
	}
	else if(sum < 2){
		printStr("The sum is less than a")
	}
	else{
		printStr("The sum is less than a")
	}
	var count: int = 0
	while(count < 10){
		printInt(fib(count))
		count = count + 1
	}
	else{
		printStr("I cannot count!")
	}

	printInt(sum)

	printInt(sqrDist(3, 3))

	printStr("Hello world!")

	printTimes("Hello", 5)

	var squares: [int] = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
	var size: int = squares.Count

	var smallest: int = ListTools.minInt(squares)
	printInt(smallest)


	var i: int = 0
	while(i < 10){
		printInt(squares[i])
		i = i + 1
	}

	var u: t1 = 5
	var u2: union[int, bool, str] = u
	var u3: union[int, bool, union[str, float]]
	var u4: union[int, bool, str, float] = u3

	var unionList: [int | bool] = [1, true, 5, 2, false, false]
	var boolList: [bool] = [true, true, false]
	var strList: [str] = ["hello", "world"]
	
	var listList: [[int]] = [[1,2,3], [4,5,6]]

	var u5: int|bool|float = 5

	return 0
}